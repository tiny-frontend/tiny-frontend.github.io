import{r as o,o as a,c as r,a as t,b as s,F as l,d as n,e}from"./app.ee617076.js";import{_ as h}from"./plugin-vue_export-helper.21dcd24c.js";var d="/images/docs/horizontal-slicing.jpg";const c={},p=n('<h1 id="about-tiny-frontend" tabindex="-1"><a class="header-anchor" href="#about-tiny-frontend" aria-hidden="true">#</a> About tiny frontend</h1><h2 id="before-we-start" tabindex="-1"><a class="header-anchor" href="#before-we-start" aria-hidden="true">#</a> Before we start</h2><h3 id="\u{1F44D}-what-tiny-frontend-is" tabindex="-1"><a class="header-anchor" href="#\u{1F44D}-what-tiny-frontend-is" aria-hidden="true">#</a> \u{1F44D}\xA0\xA0What tiny frontend is</h3><ul><li><strong>a npm package</strong> pulling its <strong>latest deployed implementation</strong> at <strong>runtime</strong></li><li>An example of implementation of a micro frontend architecture</li><li>Aimed at solving &quot;horizontal&quot; slicing</li></ul><p>In one picture: we&#39;re trying to <strong>deploy the pink boxes independently</strong> of our host app:</p><p><img src="'+d+'" alt=""></p><h3 id="\u{1F645}\u200D-what-tiny-frontend-isn-t" tabindex="-1"><a class="header-anchor" href="#\u{1F645}\u200D-what-tiny-frontend-isn-t" aria-hidden="true">#</a> \u{1F645}\u200D\xA0\xA0What tiny frontend isn&#39;t</h3><ul><li>The One True Way to micro frontend</li><li>Aimed at solving &quot;vertical&quot; slicing</li></ul><h2 id="philosophy" tabindex="-1"><a class="header-anchor" href="#philosophy" aria-hidden="true">#</a> Philosophy</h2><h3 id="guiding-principles" tabindex="-1"><a class="header-anchor" href="#guiding-principles" aria-hidden="true">#</a> Guiding principles</h3>',10),u=e("This implementation is very inspired "),m={href:"https://medium.com/cazoo/how-to-build-micro-frontends-with-react-271e651272bc",target:"_blank",rel:"noopener noreferrer"},g=e("by the architecture we are using at Cazoo"),f=e("."),w=n('<p>Here are a few guiding principles:</p><ul><li>\u269B\uFE0F \xA0 Use the framework (in this case React) as the runtime glue</li><li>\u{1F60C} \xA0 Host shouldn&#39;t need anything special to consume a tiny frontend</li><li>\u{1F4AA} \xA0 Be typesafe</li><li>\u{1F440} \xA0 Ensure shared dependencies are compatible at build time</li><li>\u2705 \xA0 Automatic opt-in for non-breaking changes</li><li>\u{1F4A5} \xA0 Manual opt-in for breaking changes</li></ul><h3 id="when-to-use-it" tabindex="-1"><a class="header-anchor" href="#when-to-use-it" aria-hidden="true">#</a> When to use it</h3><p>This approach works well in an environment where teams have clear domain boundaries and own their whole stack.</p><p>It is targeted at solving the &quot;horizontal&quot; slicing problem you can encounter in such environment: <code>Team\xA0A</code> wants to show a component on a page owned by <code>Team\xA0B</code>.</p><p>For example:</p><ul><li>Consumer finance team wants to show a financing calculator on some marketing page</li><li>Payment team wants to show a payment component in the Checkout flow</li><li>Logistics team wants to let customer reschedule their order in the My Account section</li><li>Content team deploys a Header and Footer used throughout apps on the site</li></ul><p>However, it doesn&#39;t aim at solving the &quot;vertical&quot; slicing problem: <code>Team\xA0A</code> and <code>Team\xA0B</code> own full apps on the domain, with client side navigation working between apps.</p>',8);function b(y,_){const i=o("ExternalLinkIcon");return a(),r(l,null,[p,t("p",null,[u,t("a",m,[g,s(i)]),f]),w],64)}var k=h(c,[["render",b]]);export{k as default};
